---
title: "Blog"
in_menu: false
author: "Lars Baehren"
---

# {title:} #

**:::**

### Test Code ###


_Thu, 05. March 2015 -- 18:05_

Ich finde es immer wieder ganz gut, wenn ich erst einmal Dinge unter sehr kontrollierten
Bedingungen test kann, ehe ich mich daran mache neue Funktionalitaet im Produktionscode
zu implementieren. Aus diesem Grunde schaue ich mir gerade einmal an, wie ich denn
die Behandlung der Qualitaet-Werte (welche letzten Endes fuer jedes Pixel des Detektors
zugewiesen werden) am besten aufsetzen kann: sind lediglich ein paar Zeilen Python-Code
mit welchen ich sowohl ein Array mit Daten und die zugehoerigen Flags generieren kann.

~~~~ python
  data  = np.random.rand (20, 20)
  flags = np.zeros (data.shape, dtype=np.int)

  # Assign the flags
  flags[data<0.01] += 1
  flags[data<0.10] += 2
  flags[data>0.90] += 16
  flags[data>0.99] += 32
~~~~

Was mich hier natuerlich am meisten interessiert sind die Flags; mit den obigen Kriterien
fuer die Selektion bekomme ich ein Array, welches folgendermassen aussieht:

~~~~
[[16  0  0  0  3  0  0  0  0 16  0 16 16 16  0  0 16  0  0  2]
 [ 0  0  0  0  0  0 16  0  0  0  3  0  0  2  0  0  0 16  0  0]
 [ 0  0  0  2  0  0  0  0  0 16  0  0  0  0  3  0  0 48  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  2  0  3 16  0  0  0  0  0]
 [ 3  0  3 16  0  0  0  0  0  0  0  0  2  2  0 64  0 16 16  0]
 [ 0  0  0  3  0  0 16 16  0  0  0 48  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0 16 16  0  0  0  0  0  0  0  0 16  0]
 [ 0  0  0  0  0  0  0  0  0  0 16  0  3  0  0  0  0 48  0 16]
 [ 0  0  0  0  0  0 16  0  2  0 16  2  0 16  0  0  0  0  0  0]
 [ 0  0  0  0  2  0  0  0  0  0  0  0  0  2  0  0  0  0  0  0]
 [ 0  0  0  2  0  0  0  0  2  0 64  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  2  0  0  0  0  0  2  3  0  0  0  2  0  2  0  0]
 [ 0  3  0  0  0  0 48 16  0  0  0 64  2  0  0  3  0  2 16  2]
 [ 0  0  0  0  0  0  0  0  0 16  0  0  0  3  0  0  0  0  0  0]
 [ 0 16  0  0  0  0  0  0 16  0  0  0  0  0  0  0 16  3  0  0]
 [ 0  0  0  3 48  0  3  0 16  0  0 16  0  0  0  0 16  0  2  0]
 [ 0  0  0  0  0  0  0  0  0  0  2  0  0 16  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0 16  0  0  0  0  0  0  0  0 16  0]
 [ 0  0  0  0  2  0  0  0  0  0  0  0  0  0  0 16  0 16  0  0]
 [ 0  3  2  0 16  0  0  2 48  0  0 16 16  0 16  0 16  0  3  0]]
~~~~

Fuer den Algorithmus, an welchem ich derzeit arbeite, wirklich interessant sind
alleine die Eintraege mit einem bestimmten Wert:

~~~~ python
  print ("FLAG_DEFECTIVE\n{}".format(flags&2))
~~~~

Ist wirklich so einfach! Das Array, welches am anderen Ende herauskommt enthaelt
nur noch an Stellen einen Eintrag, wo die Pixelmaske den Wert "2" enthaelt.

~~~~
[[0 0 0 0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0]
 [0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
 [0 2 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0]
 [0 0 2 0 2 2 0 2 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0]
 [0 0 0 0 0 0 0 0 2 0 0 0 2 0 0 0 0 0 0 0]
 [0 0 2 0 0 0 0 0 0 2 0 0 2 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0]
 [0 0 2 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0]
 [2 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 2 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 2 0 0 0 0]
 [2 0 0 0 2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0]]
~~~~

Worueber ich mir jetzt noch einmal ein klein wenig Gedanken machen muss ist, wie
die Flags in sinnvoller Weise aufbereiten kann; duerfte wohl ein Scatter-Plot werden...

**:::**

### Keine angenehme Vorstellung ###


_Wed, 04. March 2015 -- 19:12_

Das Meeting hier bei [SRON](http://www.sron.nl) ist vorbei. Ob das, was da allerdings
bei herausgekommen ist unbedingt zur Freude reicht, darf doch sehr bezweifelt werden.
Warum ich so kritisch bin, laesst sich ganz schnell erklaeren: der wesentliche Vorschlag,
welcher heute bei dem Treffen als Loesungsansatz vorgeschlagen wurde, ist, dass unser
Software-Team unter die Kontrolle des KNMI gestellt und dort angesiedelt werden soll.
Dass ich dies [aus persoenlicher Erfahrung](/blog/2013/11/2013-11-28_20-08.html) fuer
alles andere positiv halte duerfte wohl nicht ueberraschen; zu schlecht sind einfach
die Eindruecke, welche von meinem Aufenthalt von vor eineinhalb Jahren uebrig geblieben
sind. Konkret bedeutet dies: ich sollte mir wirklich gut ueberlegen, wie ich mit
dieser Situation umzugehen gedenke.

Dass unter diesen Umstaenden die Dinge hier in unserem kleinen Team die Emotionen
recht blank liegen duerfte wohl wenig verwundern. Da noch nicht alles in Stein gemeisselt
ist, haben wir vorhin mal die Koepfe zusammengesteckt, um zu formulieren wo jeder
einzelne von uns die Probleme mit den Plaenen sieht. Ob die daraus nun entstehende
Antwort wirklich Einfluss auf das weitere Geschehen hat muss sich noch zeigen; recht
deutlich aber ist, dass niemand so recht begeistert ist von dem, was da kommen soll
-- niemand hier ist erst seit gestern im Geschaeft, so dass es durchaus deutliche
Meinungen gibt, welche nun entsprechend kanalisiert werden muessen. Ich fuer meinen
Teil werde da auch mal sehr in mich gehen muessen, wo ich persoenlich die Grenze
ziehen sollte und an welcher Stelle ich (unter Beistand von [S\[&\]T](http://www.stcorp.nl)
natuerlich) zu einem Plan-B uebergehen wuerde.

**:::**

### Und wieder Details ###


_Wed, 04. March 2015 -- 10:23_

... und da dachte ich, dass ich einfach ein wenig in Ruhe die diversen Dinge abarbeiten
kann, welche ich auf meiner Liste hatte. Waehrend in einem anderem Raum die Besprechung
mit den anderen Projektteilnehmern stattfindet (womit ich gluecklicherweise nicht viel
zutun habe), versuche ich die Zeit zu nutzen, damit nicht nur die Quicklooks netter
werden, sondern auch die Algorithmen selber bessere Resultate liefern. Unterbrochen
wird dies allerdings immer wieder dadurch, dass Paul hier und da immer wieder ein
paar Kleinigkeiten einfallen, welche sich noch an den Quicklooks -- welche ja auch
fuer das Reporting der CKD Algorithmen verwendet werden -- noch verbessern lassen.
Ist natuerlich nicht ganz so geschickt, weil dies ein wenig aus dem Gedankenfluss
herausreisst -- ich hoffe aber mal, dass ich die wichtigsten Punkte davon nun abgedeckt
habe, so dass ich mich wieder meinen urspruenglichen Vorhaben zuwenden kann...

**:::**

### Matplotlib: rasterized colorbar ###


_Wed, 04. March 2015 -- 00:37_

One of the pieces of software which is getting quite some beating during the On-ground
calibration of [TROPOMI](/work/tropomi.html), are the modules for the generation of
quicklooks. These collections of plots are used in a number of places, most prominently
of course for the initial inspection of the ongoing calibration measurements, where
this is kind of a first line of defense against faulty measurements. Other than this
the plots also play quite a crucial role in the validation of the calibration key
data (CKD), which are derived from the calibration measurements and later on to be
used as part of the processing pipeline. With this kept in mind I think it is understandable
why with an important progress meeting in sight, there has been yet another rush at
getting a number of details fixed... such as this one:

![Quicklook screenshot](/blog/2015/03/2015-03-03_Matplotlib_colorbar.png)

While most areas with a solid fill -- such as e.g. the histograms -- appear as such
when printed or displayed on the screen, things look slightly different when turning
an eye to the [colorbar](http://matplotlib.org/api/colorbar_api.html) associated
with the image plot. After some online search it turns out that this essentially is
an issues with the rendering of the PDF - the resolution: use a rasterized colorbar.

> Incidentally, the lines in the pdf are an artifact of most pdf viewers,
> not a bug in the pdf file.

Given this basic information the remaining question now is: how convince [Matplotlib](http://matplotlib.org)
to generate a PDF where the colorbar does not show lines at every facet?


 - Original version: the colorbar is plotted, attached to the axis labeled
   ``axis_colorbar``, but nothing further is being done.

~~~~ python
    fig.colorbar (img,
                  cax=axis_colorbar,
                  orientation='vertical',
                  format=formatter)
~~~~

 - Updated version: the return from the ``colorbar()`` method is captured, such that
   we subsequently can enable rasterization.

~~~~ python
    cb = fig.colorbar (img,
                       cax=axis_colorbar,
                       orientation='vertical',
                       format=formatter)
    cb.solids.set_rasterized(True)
~~~~

**:::**

### Durch den Hagel ###


_Mon, 02. March 2015 -- 21:21_

Also das war nicht so wirklich toll vom Timing her: als ich vorhin vom Institut aus
in Richtung Bushaltestelle losgezogen bin, scheine ich genau den Zeitpunkt erwischt
zu haben, es nicht nur angefangen hat zu regnen... sondern zu hageln. War jetzt nicht
unbedingt das, wie ich mir den Start in den Abend vorgestellt hatte, zumal es auf der
Strecke nichts gibt (zumindest nach dem Schneiden der Baeume am Rand des Weges) was in
irgendeiner Weise Schutz bieten koennte. Da war ich doch recht froh, als ich mich
unter das Dach der Bushaltestelle retten konnte... nur um dann festzustellen, dass
meine Tasche mit einer Schicht Hagelkoerner ueberzogen war.

**:::**

### Nervoes ###


_Thu, 26. February 2015 -- 18:37_

Also so nervoes war ich weder bei meinem Interview fuer [S\[&\]T](http://www.stcorp.nl)
noch fuer [SRON](http://www.sron.nl) -- was dem vielleicht ein wenig nahe kommt war
das Gespraech seinerzeit bei [ASTRON](http://www.astron.nl). Ist aber vielleicht nicht
so ganz verwunderlich: in beiden Faellen geht es um Astronomie und (als ein Extra)
Interferometrie. Wo ich mich durch die ganzen [ESO](http://www.eso.org) Dokumente
durchwuehle -- natuerlich reicht die Zeit nicht um alles zu lesen, was ich lesen moechte
-- gehen einfach ueberall Blinklichter vor dem inneren Auge auf. Es gibt einfach Unmengen
Punkte, welche mir vertraut vorkommen und welche mein Interesse auf sich ziehen: da
wuerde ich garnicht einmal so sehr den Unterschied machen was alleine die Software-Seite
betrifft, sondern auch von der physikalisch-technischen Seite geht hier ein Feuerwerk
in die Luft. Wenn es nach mir ginge, dann wuerde ich am liebsten schon bei dem ersten
Interview gleich mit Loesungsansaetzen kommen -- das ist aber vielleicht ein etwas
uebertriebener Anspruch, denn schliesslich wird da immer noch einiges an Einarbeitung
faellig, wenn es wirklich klappen sollte. Vielleicht muss ich auch die mit Notizen
beschriebenen Paper, User Manuals, etc. beiseite legen und einfach nur ruhig bleiben
-- bringt ja nichts, wenn ich vor lauter Begeisterung und Aufregung keinen zusammenhaengenden
Satz von mir geben kann.

**:::**

### Webgen Updates ###


_Wed, 25. February 2015 -- 21:50_

[Wie zuletzt berichtet](/blog/2015/02/2015-02-23_08-08.html) hatte ich einige Probleme
mit [Webgen](http://webgen.gettalong.org), dem Tool welches ich zum erzeugen dieser
Webseiten verwende. Auf keine Anfrage in der [Webgen User-Group](https://groups.google.com/forum/#!forum/webgen-users)
hat sich der Lead-Developer des Projektes bei mir zurueckgemeldet und mir -- nachdem
sich das Problem reproduzieren liess -- bestaetigt dass der Fehler, welcher mir das
Leben schwer machte, in der Tat im Quellcode sass. Am Montag Abend habe ich mir dann
die gepatchte Version gezogen und auf meine Seiten losgelassen:

~~~~
[100%] Rendering website from sources ...
INFO  Generating website...
INFO  [update] </blog/>
INFO  [update] </blog/2015.html>
INFO  [update] </blog/2015/01/index.html>
INFO  [update] </blog/2015/02/>
INFO  [create] </blog/2015/02/2015-02-24_07-59.html>
INFO  [update] </blog/2015/02/index.html>
INFO  [update] </blog/2015/index.html>
INFO  [update] </blog/index.html>
INFO  [update] </blog/upcoming/>
INFO  [update] </blog/upcoming/index.html>
INFO  ... done in 477.85 seconds
[100%] Built target Website
~~~~

Ok, es dauerte immer noch eine Weile, bis alles durchgelaufen war, aber enscheidende
Punkt ist, dass ich nicht zunaecht den kompletten Cache loeschen und alles von
Anfang an neu generieren musste. Die obige Ausgabe war alles was ich zu sehen bekommen
habe, nicht seitenweise Log-Messages.

[Thomas Leitner](https://github.com/gettalong) schien recht beeindruckt zu sein von
meiner Webseite -- leider habe ich die Nachricht nicht mehr, dass es sich wahrscheinlich
um die seitenmaessig groesste Installation dergleichen handeln wuerde -- und dem Problem
die Laufzeit betreffend, so dass ein wenig spaeter noch eine weitere Nachricht eintraf,
in welcher ich den Tip bekam eine kleine Aenderung an dem Template fuer die generierten
Seiten vorzunehmen. Dem Rat bin ich gerne gefolgt -- als ich dann _Webgen_ wieder
angeworfen habe, musste die Website komplett neu gebaut werden (weil schliesslich
das zugrunde liegende Template veraendert wurde)... aber wie sich an der dem Timer
erkennen laesst, ging dies sogar schneller als die zuvorige Teil-Generierung.

~~~~
[100%] Rendering website from sources ...
INFO  Generating website...
INFO  [update] </blog/>
INFO  [update] </blog/2003.html>
INFO  [update] </blog/2003/2003-11/2003-11-03_20-47.html>
INFO  [update] </blog/2003/2003-11/2003-11-03_20-54.html>
INFO  [update] </blog/2003/2003-11/2003-11-03_20-57.html>

...

INFO  [update] </writing/book_reviews/moondial.html>
INFO  [update] </writing/book_reviews/red_rabbit.html>
INFO  [update] </writing/book_reviews/the_divine_secrets_of_the_ya-ya-sisterhood.html>
INFO  [update] </writing/book_reviews/the_last_year_of_being_married.html>
INFO  [update] </writing/book_reviews/the_undutchables.html>
INFO  [update] </writing/index.html>
INFO  ... done in 256.40 seconds
[100%] Built target Website
~~~~

Mit dieser Aussicht vor Augen, habe ich also den ersten Test noch einmal wiederholt:
die aktuellen Index-Seiten neu generieren und dann die Website neu bauen...

~~~~
[100%] Rendering website from sources ...
INFO  Generating website...
INFO  [update] </blog/>
INFO  [update] </blog/2015.html>
INFO  [update] </blog/2015/01/index.html>
INFO  [update] </blog/2015/02/index.html>
INFO  [update] </blog/2015/index.html>
INFO  [update] </blog/index.html>
INFO  [update] </blog/upcoming/2015-02-24_08-18.html>
INFO  [update] </blog/upcoming/index.html>
INFO  ... done in 34.14 seconds
[100%] Built target Website
~~~~

Im Vergleich mit dem ersten Run -- nach Behebung des Fehlers mit dem Cache -- haetten
wir also einen Faktor 10 an Geschwindigkeitsgewinn (und damit waere nicht nicht der
Zustand beruecksichtigt, welcher vor der Behebung des Fehlers herrschte). Das ist
natuerlich nicht die einzige Sache von Belang: der "nette Nebeneffekt" davon, dass
wirklich nur die veraenderten Seiten neu gebaut werden bedeutet auch, dass nur ein
Bruchteil dessen via `rsync` auf den Server uebertragen werden muss. Der komplette
Ablauf -- von der Erstellung eines Blog-Eintrages bis zum Erscheinen auf dem Webserver
-- geht nun um Laengen schneller!

**:::**

### Blindflug beenden ###


_Tue, 24. February 2015 -- 23:19_

Wenn es eine Sache gibt welche ich nicht leiden kann -- und dies ist umso mehr
der Fall wenn es um das Testen von Software geht -- wenn ich ueber unvollstaendige
Informationen verfuege. Woran ich mich immer wieder gestoert habe ist der Umstand,
dass die Software, welche wir abliefern, in einer Umgebung getestet wird, zu welcher
wir kaum Zugang haben -- von einer Black-Box unterscheidet sich dies nicht sonderlich
viel. Vor einer Weile schon habe ich mir daher eine Moeglichkeit zusammengebastelt,
mit welcher ich zumindest einen Teil dessen generieren und extrahieren kann, was von
der anderen Seite anscheinend mit dafuer verwendet wird, um unsere Arbeit zu bewerten.
Da dies aber kein dauerhafter Zustand ist, habe ich mir heute Abend -- nachdem ich
aus dem Insitut zurueckgekommen bin -- ein wenig Zeit beiseite gestellt, um meine
[CMake](http://www.cmake.org)-Umgebung zu aktualisieren und fuer einen ersten
Testrun nach langer Zeit anzuwerfen:

~~~~
Create new tag: 20150224-2201 - Experimental
Configure project
   Each . represents 1024 bytes of output
    .. Size of output: 1K
Build project
   Each symbol represents 1024 bytes of output.
   '!' represents an error and '*' a warning.
    ............*!!!!!!!!!!!!!!*.*********......*.....  Size: 50K
    **.***********....................................  Size: 99K
     Size of output: 99K
Error(s) when building project
   50 or more Compiler errors
   50 or more Compiler warnings
Test project /home/larsb/CodeDevelopment/Work/TROPOMI/ocalfw/build
      Start  1: pylint_check_lib
 1/61 Test  #1: pylint_check_lib .......................................***Failed   47.66 sec
      Start  2: pylint_check_algorithms
 2/61 Test  #2: pylint_check_algorithms ................................***Failed  114.54 sec
      Start  3: pylint_check_algorithms_swir
 3/61 Test  #3: pylint_check_algorithms_swir ...........................***Failed   31.49 sec
      Start  4: pylint_check_utest
 4/61 Test  #4: pylint_check_utest .....................................***Failed    9.34 sec
      Start  5: build_documentation
 5/61 Test  #5: build_documentation ....................................   Passed  111.63 sec
      Start  6: algorithms.quicklook.plots_quicklook_swir_utest
 6/61 Test  #6: algorithms.quicklook.plots_quicklook_swir_utest ........   Passed   24.27 sec
      Start  7: algorithms.radiometry_swir.utils_utest
 7/61 Test  #7: algorithms.radiometry_swir.utils_utest .................   Passed    0.99 sec
      Start  8: algorithms.straylight_swir.utils_utest
 8/61 Test  #8: algorithms.straylight_swir.utils_utest .................   Passed   27.02 sec
~~~~

Ich bin mal gespannt, was dabei herauskommt; hoechst wahrscheinlich wird mir dieser
erste Durchgang noch eine Reihe von Stellen aufzeigen, wo ich meine Testumgebung
anpassen muss, aber immer gibt mir dies dann schon einmal eine unabhaengige Bewertung
ueber den Gesamtzustand der Software (welche anders leider nicht verfuegbar gemacht
wird).

**:::**

### Supporting TROPOMI OCAL (5) ###


_Tue, 24. February 2015 -- 07:59_

Instead of being able to have some time to relax and take some time off, I have
been spending a good deal of the past weekend to work on TROPOMI. Pretty much
everybody body has been called to arms to prepare for a meeting -- originally planned
at the begin of this week, but now re-scheduled -- in order to make all the
necessary material available to be used as input. For me this mainly resulted in
ramping up even more the work on the nightly build and CKD calculations.

Based on what already have been doing so far, this work essentially would split into
two parts: a) cleanup or create the necessary task task configuration scripts and b)
get everything to run within the confines of the environment available on the build
server. Since the latter once still to a certain degree has something of a gray box
(i.e. luckily enough not being completely black that is), I need to do as much testing
as possible before-hand. This of course requires a certain flexibility in the way the
tests are set up, which is why I have been spending a good half of my time setting up
and fine-tuning wrapper scripts to stage and test components before submitting
them to the actual nightly build. A side-effect of this effort now (once more)
has been, that I managed to clean up and condense a lot of the instructions
found throughout the build scripts:

__a) Initial version__

Strictly speaking this already would be one steps past the
initial version: already done is some clean-up based on the fact that the tasks per
calibration step can be controlled from a simple ``Makefile``, which means that the
master build script only needs to call the appropriate build targets.

~~~~ bash
    #____________________________________________________________________
    #                              Detector Pixel Quality Flagging (DPQF)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dpqf
    make dependencies
    make 2015_01_07T02_13_26_MonB
    make 2015_01_07T03_10_18_MonB
    make 2015_01_08T09_26_29_dled_lin_sw
    make clean
    cd ${varBasedir}

    #____________________________________________________________________
    #                                         Dark flux correction (DARK)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dark
    make dependencies
    make 2014_12_28T05_12_16_Rev4425_DrkDpqf
    cd ${varBasedir}

    #____________________________________________________________________
    #                                                   Offset correction

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/offset
    make dependencies
    make 2015_01_08T09_26_29_dled_lin_sw
    make 2015_01_08T13_13_32_wls_lin_go
    make clean
    cd ${varBasedir}
~~~~

__b) Simplification 1__

Given the fact that the collection of actual tests per calibration
step can change (typically the list should expand, but who knows), it only seems reasonable
to keep that information in a form that both manual as well as automated testing is
possible. So in order to unify the overall approach I have been adding a ``nightly_ckd``
target, which then in turn in what is getting called from the master test script.
Though one certainly could argue this (at least to some degree) only moves the complexity
to another level in the processing chain, it considerably modularizes the testing,
because whatever is called from the master test script (by the build server) can
previously be tested be individual module -- hence if something would break really
badly, it would be possible to temporarily disable an individual module while working
on the resolution.

~~~~ bash
    #____________________________________________________________________
    #                              Detector Pixel Quality Flagging (DPQF)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dpqf
    make nightly_ckd
    cd ${varBasedir}

    #____________________________________________________________________
    #                                         Dark flux correction (DARK)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dark
    make nightly_ckd
    cd ${varBasedir}

    #____________________________________________________________________
    #                                                   Offset correction

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/offset
    make nightly_ckd
    cd ${varBasedir}
~~~~

__c) Simplification 2__

With the above simplifications already put in place the
follow-up is rather straight forward: there is so much repetition and redundancy
in the code, that we can do another round of clean-up.

~~~~ bash
    #____________________________________________________________________
    #                              Detector Pixel Quality Flagging (DPQF)
    #                                         Dark flux correction (DARK)
    #                                                   Offset correction

    for TESTS in dark dpqf offset
    {
        cd ${OCALFWDIR}/tasks/trop/ckd/swir/${TESTS}
        make nightly_ckd
    }
~~~~

All of the above of course merely would be an exercise in cosmetics if it was not
for the fact that this now has enabled me to quicker isolate error, stage changes
and increase the number of tests which successfully pass the nightly build. Way to
go...

**:::**

### Commits while on the road ###


_Mon, 23. February 2015 -- 19:27_

Hard to over-estimate the impact the migration to [Git](http://www.git-scm.com) as
(local) version control management tool has had. Given the fact that I am spending
a considerable fraction of my time traveling on the train, still being able to commit
source code changes (and revert changes if need be) is quite essential.

~~~~
* commit a66c29b1942dd826daa43d4dbb922ce2ec0e45c9
| Author: Lars Baehren <lbaehren@gmail.com>
| Date:   Mon Feb 23 09:15:28 2015 +0100
|
|     Quicklooks need to be generated per CKD index and measurement campaign
|
* commit 0aa9ee8fac43dbafbf2a5890e890639ab12de03c
| Author: Lars Baehren <lbaehren@gmail.com>
| Date:   Mon Feb 23 08:58:05 2015 +0100
|
|     More generic configuration setup, allowing to test processing using different
|     CKD index files/sets
~~~~

The above would not be possible if I would be doing a straight SVN checkout of the
original [Subversion](https://subversion.apache.org) repository -- using ``git-svn``
provides me with the additional comfort layer and security layer, which enables me
to continue working while traveling.

Probably the only (considerably small) draw-back of this setup is, that it works
quite well, making it harder to find some motivation and use case for testing other
tools, such as e.g. [Fossil](http://fossil-scm.org/index.html/doc/trunk/www/index.wiki)
which every since listening to the [episode on FLOSS-Weekly](http://twit.tv/show/floss-weekly/320)
is high up on my list of software tools to play with).

**:::**

### Error at path_handler.copy ###


_Mon, 23. February 2015 -- 08:08_

Also, das war es wohl doch nicht einfach nur ein Fehler meinerseits, sondern wirklich
etwas, das in [Webgen](http://webgen.gettalong.org) selber korregiert werden muss:

> Thanks for the [link to the sources](https://github.com/lbaehren/Website) and the
> explanation on how to reproduce the bug! I think that I have located the problem and
> I'm working on a fix.

Ich habe ja schon seit einer Weile das Problem gehabt, dass ich bei Aenderungen an
einem der Index-Seiten nicht umhin konnte, als die komplette Website neu zu bauen.
Ursache (zumindest was den Fehler betrifft, mit welchem ich konfrontiert wurde) hierfuer
war, dass sich ``Webgen`` beim Verwenden des Cache aufgehangen hat und mir daher nichts
anderes uebrig blieb, als letzteren zu loeschen und alles von Anfang an zu bauen -- nicht
unbedingt das, wofuer man sich eigentlich einen Cache anlegt.

~~~~
INFO  Generating website...
INFO  [update] </blog/>
INFO  [update] </blog/2003.html>
webgen encountered a problem:
  Error at path_handler.copy while creating a node from </blog/2003.en.html#blog-entries--2003>:
    Can't have two nodes with same alcn: /blog/2003.en.html#blog-entries--2003
make[2]: *** [CMakeFiles/Website] Error 1
make[1]: *** [CMakeFiles/Website.dir/all] Error 2
make: *** [all] Error 2
~~~~

Am Wochenende war es mir dann endlich zu bloed, so dass ich mein Problem an die
[Webgen User-Group](https://groups.google.com/forum/#!forum/webgen-users) geschickt
habe. Dauerte nicht lange, bis sich Thomas Leitner (der Hauptentwickler von ``Webgen``)
zurueckmeldete; nach ein klein wenig hin und her kam dann die Bestaetigung, dass ich da
allen Anschein nach einen Fehler im ``path_handler`` gefunden habe. Nun bin ich mal
gespannt, wie es mit der Korrektur aussieht -- wenn sich dies beheben laesst wuerde
dies in meinem Fall gleich zu zwei entscheidenden Verbesserungen fuehren:

 1. Die Generierung der Website duerfte sich halbieren.
 2. Bei der Synchronisation mit dem Server, auf welchem die Seiten gehostet sind,
    muesste ich nur noch die Seiten uebertragen, an welchen ich wirklich etwas
    geaendert habe.

Dass ich unter diesen Umstaenden sehr gespannt auf das Update bin, duerfte wohl nicht
verwundern...

**:::**

### Ohne Anzeige ###


_Mon, 23. February 2015 -- 07:09_

Einer der Schwaechen des ICE ist eindeutig, dass ein Teil der internen Funktionalitaet
sehr stark vom Funktionieren der Bordelektronik abhaengt. So kommt es immer wieder
vor, dass die Anzeigen fuer die Sitzplatz-Reservierungen komplett fehlen (wo auch
immer die genaue Ursache hierfuer zu suchen waere). Was dies aber bedeutet ist, dass
man sich so ziemlich an jedem Platz niederlassen kann und doch die gleiche Chance
hat von irgendeinen Bahnhof an von dort wieder aufgescheucht zu werden. Na gut, mache
ich mir jetzt einfach mal nicht zu sehr den Kopf drum, denn a) habe ich da nicht
sonderlich viel Einfluss drauf und b) muss ich mich ja schliesslich irgendwo hinsetzen.

**:::**

### Supporting TROPOMI OCAL (4) ###


_Sat, 21. February 2015 -- 22:32_

It is busy times: not only have we been spending the past three weeks on supervising
the laser measurements (at least those of the team on site), but also back at the
institute trying to process and inspect the incoming data to assess the suitability
of the calibration measurements. With all of this going on there of course is a
considerable risk to -- amongst all the day to day madness -- lose out of sight
the longer-term planning (e.g. when it comes to important project milestone). One
of the attempts to keep an eye on the planning has been to revitalize efforts to
use our [Redmine](http://www.redmine.org) issue tracker. Simply filling in tasks
of course is not enough: issues kept around in the system should be assigned correctly
and updated as work progresses.

![TROPOMI Redmine issue tracker](/blog/2015/02/2015-02-21_Redmine_TROPOMI.png)

To get things going on the part of the on-ground calibration, I set aside half an hour
this afternoon, to start entering and organising tasks related to the next upcoming
milestones; not complete yet, but once going through the remainder of the calibration
validation plan (CValP) we should get a reasonable picture of what tasks need to be
worked on and how we are doing in terms of deliverables.

Back to coding now...

**:::**

### Und weg ist das Wochenende ###


_Fri, 20. February 2015 -- 17:07_

Das hatte ich mir alles ein wenig anders vorgestellt: statt einem ruhigen Wochenende
hier in Bonn habe ich nun gleich zwei Dinge mit hoher Prioriaet am Laufen.

 1. Vorbereitung fuer ein Telefon-Interview am Mittwoch mit [ESO](http://www.eso.org).
 2. Vorbereitung fuer ein fuer ein Audit bei [SRON](http://www.sron.nl).

Muss ich mal schaue, wie ich die Dinge gut unter einen Hut kriege... und gleichzeitig
noch Gelegenheit zum Schlafen finde.

**:::**

### Der richtige Soundtrack ###


_Thu, 19. February 2015 -- 18:03_

Es kommt doch immer wieder auf die richtige Musik fuer die entsprechende Gelegenheit
an: da ich schauen muss, dass ich bis Bonn noch paar Dinge erledigt bekommen muss
-- vor allen Dingen den Sidney versprochenen Code fuer die Offset Korrektur
fertigstellen -- habe ich mich fuer den zu der Situation passenden Soundtrack
entschieden. Die Kriterien hierfuer sind eigentlich recht einfach: die Musik sollte
ueber ein recht hohes Energieniveau verfuegen und trotz technischer Brillianz immer
noch ueber eine entsprechende Eingaengigkeit verfuegen. Als Start habe ich mich daher
fuer eines der Alben von _Derek Sherinian_ entschieden ("Mythology"); das passt super
von der ganzen Atmosphaere her ins hilft zweifelsfrei dabei schnell und unter Druck
zu arbeiten.
