---
title: "Blog"
in_menu: false
author: "Lars Baehren"
---

# {title:} #

**:::**

### Blindflug beenden ###


_Tue, 24. February 2015 -- 23:19_

Wenn es eine Sache gibt welche ich nicht leiden kann -- und dies ist umso mehr
der Fall wenn es um das Testen von Software geht -- wenn ich ueber unvollstaendige
Informationen verfuege. Woran ich mich immer wieder gestoert habe ist der Umstand,
dass die Software, welche wir abliefern, in einer Umgebung getestet wird, zu welcher
wir kaum Zugang haben -- von einer Black-Box unterscheidet sich dies nicht sonderlich
viel. Vor einer Weile schon habe ich mir daher eine Moeglichkeit zusammengebastelt,
mit welcher ich zumindest einen Teil dessen generieren und extrahieren kann, was von
der anderen Seite anscheinend mit dafuer verwendet wird, um unsere Arbeit zu bewerten.
Da dies aber kein dauerhafter Zustand ist, habe ich mir heute Abend -- nachdem ich
aus dem Insitut zurueckgekommen bin -- ein wenig Zeit beiseite gestellt, um meine
[CMake](http://www.cmake.org)-Umgebung zu aktualisieren und fuer einen ersten
Testrun nach langer Zeit anzuwerfen:

~~~~
Create new tag: 20150224-2201 - Experimental
Configure project
   Each . represents 1024 bytes of output
    .. Size of output: 1K
Build project
   Each symbol represents 1024 bytes of output.
   '!' represents an error and '*' a warning.
    ............*!!!!!!!!!!!!!!*.*********......*.....  Size: 50K
    **.***********....................................  Size: 99K
     Size of output: 99K
Error(s) when building project
   50 or more Compiler errors
   50 or more Compiler warnings
Test project /home/larsb/CodeDevelopment/Work/TROPOMI/ocalfw/build
      Start  1: pylint_check_lib
 1/61 Test  #1: pylint_check_lib .......................................***Failed   47.66 sec
      Start  2: pylint_check_algorithms
 2/61 Test  #2: pylint_check_algorithms ................................***Failed  114.54 sec
      Start  3: pylint_check_algorithms_swir
 3/61 Test  #3: pylint_check_algorithms_swir ...........................***Failed   31.49 sec
      Start  4: pylint_check_utest
 4/61 Test  #4: pylint_check_utest .....................................***Failed    9.34 sec
      Start  5: build_documentation
 5/61 Test  #5: build_documentation ....................................   Passed  111.63 sec
      Start  6: algorithms.quicklook.plots_quicklook_swir_utest
 6/61 Test  #6: algorithms.quicklook.plots_quicklook_swir_utest ........   Passed   24.27 sec
      Start  7: algorithms.radiometry_swir.utils_utest
 7/61 Test  #7: algorithms.radiometry_swir.utils_utest .................   Passed    0.99 sec
      Start  8: algorithms.straylight_swir.utils_utest
 8/61 Test  #8: algorithms.straylight_swir.utils_utest .................   Passed   27.02 sec
~~~~

Ich bin mal gespannt, was dabei herauskommt; hoechst wahrscheinlich wird mir dieser
erste Durchgang noch eine Reihe von Stellen aufzeigen, wo ich meine Testumgebung
anpassen muss, aber immer gibt mir dies dann schon einmal eine unabhaengige Bewertung
ueber den Gesamtzustand der Software (welche anders leider nicht verfuegbar gemacht
wird).

**:::**

### Supporting TROPOMI OCAL (5) ###


_Tue, 24. February 2015 -- 07:59_

Instead of being able to have some time to relax and take some time off, I have
been spending a good deal of the past weekend to work on TROPOMI. Pretty much
everybody body has been called to arms to prepare for a meeting -- originally planned
at the begin of this week, but now re-scheduled -- in order to make all the
necessary material available to be used as input. For me this mainly resulted in
ramping up even more the work on the nightly build and CKD calculations.

Based on what already have been doing so far, this work essentially would split into
two parts: a) cleanup or create the necessary task task configuration scripts and b)
get everything to run within the confines of the environment available on the build
server. Since the latter once still to a certain degree has something of a gray box
(i.e. luckily enough not being completely black that is), I need to do as much testing
as possible before-hand. This of course requires a certain flexibility in the way the
tests are set up, which is why I have been spending a good half of my time setting up
and fine-tuning wrapper scripts to stage and test components before submitting
them to the actual nightly build. A side-effect of this effort now (once more)
has been, that I managed to clean up and condense a lot of the instructions
found throughout the build scripts:

__a) Initial version__

Strictly speaking this already would be one steps past the
initial version: already done is some clean-up based on the fact that the tasks per
calibration step can be controlled from a simple ``Makefile``, which means that the
master build script only needs to call the appropriate build targets.

~~~~ bash
    #____________________________________________________________________
    #                              Detector Pixel Quality Flagging (DPQF)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dpqf
    make dependencies
    make 2015_01_07T02_13_26_MonB
    make 2015_01_07T03_10_18_MonB
    make 2015_01_08T09_26_29_dled_lin_sw
    make clean
    cd ${varBasedir}

    #____________________________________________________________________
    #                                         Dark flux correction (DARK)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dark
    make dependencies
    make 2014_12_28T05_12_16_Rev4425_DrkDpqf
    cd ${varBasedir}

    #____________________________________________________________________
    #                                                   Offset correction

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/offset
    make dependencies
    make 2015_01_08T09_26_29_dled_lin_sw
    make 2015_01_08T13_13_32_wls_lin_go
    make clean
    cd ${varBasedir}
~~~~

__b) Simplification 1__

Given the fact that the collection of actual tests per calibration
step can change (typically the list should expand, but who knows), it only seems reasonable
to keep that information in a form that both manual as well as automated testing is
possible. So in order to unify the overall approach I have been adding a ``nightly_ckd``
target, which then in turn in what is getting called from the master test script.
Though one certainly could argue this (at least to some degree) only moves the complexity
to another level in the processing chain, it considerably modularizes the testing,
because whatever is called from the master test script (by the build server) can
previously be tested be individual module -- hence if something would break really
badly, it would be possible to temporarily disable an individual module while working
on the resolution.

~~~~ bash
    #____________________________________________________________________
    #                              Detector Pixel Quality Flagging (DPQF)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dpqf
    make nightly_ckd
    cd ${varBasedir}

    #____________________________________________________________________
    #                                         Dark flux correction (DARK)

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/dark
    make nightly_ckd
    cd ${varBasedir}

    #____________________________________________________________________
    #                                                   Offset correction

    cd ${OCALFWDIR}/tasks/trop/ckd/swir/offset
    make nightly_ckd
    cd ${varBasedir}
~~~~

__c) Simplification 2__

With the above simplifications already put in place the
follow-up is rather straight forward: there is so much repetition and redundancy
in the code, that we can do another round of clean-up.

~~~~ bash
    #____________________________________________________________________
    #                              Detector Pixel Quality Flagging (DPQF)
    #                                         Dark flux correction (DARK)
    #                                                   Offset correction

    for TESTS in dark dpqf offset
    {
        cd ${OCALFWDIR}/tasks/trop/ckd/swir/${TESTS}
        make nightly_ckd
    }
~~~~

All of the above of course merely would be an exercise in cosmetics if it was not
for the fact that this now has enabled me to quicker isolate error, stage changes
and increase the number of tests which successfully pass the nightly build. Way to
go...

**:::**

### Commits while on the road ###


_Mon, 23. February 2015 -- 19:27_

Hard to over-estimate the impact the migration to [Git](http://www.git-scm.com) as
(local) version control management tool has had. Given the fact that I am spending
a considerable fraction of my time traveling on the train, still being able to commit
source code changes (and revert changes if need be) is quite essential.

~~~~
* commit a66c29b1942dd826daa43d4dbb922ce2ec0e45c9
| Author: Lars Baehren <lbaehren@gmail.com>
| Date:   Mon Feb 23 09:15:28 2015 +0100
|
|     Quicklooks need to be generated per CKD index and measurement campaign
|
* commit 0aa9ee8fac43dbafbf2a5890e890639ab12de03c
| Author: Lars Baehren <lbaehren@gmail.com>
| Date:   Mon Feb 23 08:58:05 2015 +0100
|
|     More generic configuration setup, allowing to test processing using different
|     CKD index files/sets
~~~~

The above would not be possible if I would be doing a straight SVN checkout of the
original [Subversion](https://subversion.apache.org) repository -- using ``git-svn``
provides me with the additional comfort layer and security layer, which enables me
to continue working while traveling.

Probably the only (considerably small) draw-back of this setup is, that it works
quite well, making it harder to find some motivation and use case for testing other
tools, such as e.g. [Fossil](http://fossil-scm.org/index.html/doc/trunk/www/index.wiki)
which every since listening to the [episode on FLOSS-Weekly](http://twit.tv/show/floss-weekly/320)
is high up on my list of software tools to play with).

**:::**

### Error at path_handler.copy ###


_Mon, 23. February 2015 -- 08:08_

Also, das war es wohl doch nicht einfach nur ein Fehler meinerseits, sondern wirklich
etwas, das in [Webgen](http://webgen.gettalong.org) selber korregiert werden muss:

> Thanks for the [link to the sources](https://github.com/lbaehren/Website) and the
> explanation on how to reproduce the bug! I think that I have located the problem and
> I'm working on a fix.

Ich habe ja schon seit einer Weile das Problem gehabt, dass ich bei Aenderungen an
einem der Index-Seiten nicht umhin konnte, als die komplette Website neu zu bauen.
Ursache (zumindest was den Fehler betrifft, mit welchem ich konfrontiert wurde) hierfuer
war, dass sich ``Webgen`` beim Verwenden des Cache aufgehangen hat und mir daher nichts
anderes uebrig blieb, als letzteren zu loeschen und alles von Anfang an zu bauen -- nicht
unbedingt das, wofuer man sich eigentlich einen Cache anlegt.

~~~~
INFO  Generating website...
INFO  [update] </blog/>
INFO  [update] </blog/2003.html>
webgen encountered a problem:
  Error at path_handler.copy while creating a node from </blog/2003.en.html#blog-entries--2003>:
    Can't have two nodes with same alcn: /blog/2003.en.html#blog-entries--2003
make[2]: *** [CMakeFiles/Website] Error 1
make[1]: *** [CMakeFiles/Website.dir/all] Error 2
make: *** [all] Error 2
~~~~

Am Wochenende war es mir dann endlich zu bloed, so dass ich mein Problem an die
[Webgen User-Group](https://groups.google.com/forum/#!forum/webgen-users) geschickt
habe. Dauerte nicht lange, bis sich Thomas Leitner (der Hauptentwickler von ``Webgen``)
zurueckmeldete; nach ein klein wenig hin und her kam dann die Bestaetigung, dass ich da
allen Anschein nach einen Fehler im ``path_handler`` gefunden habe. Nun bin ich mal
gespannt, wie es mit der Korrektur aussieht -- wenn sich dies beheben laesst wuerde
dies in meinem Fall gleich zu zwei entscheidenden Verbesserungen fuehren:

 1. Die Generierung der Website duerfte sich halbieren.
 2. Bei der Synchronisation mit dem Server, auf welchem die Seiten gehostet sind,
    muesste ich nur noch die Seiten uebertragen, an welchen ich wirklich etwas
    geaendert habe.

Dass ich unter diesen Umstaenden sehr gespannt auf das Update bin, duerfte wohl nicht
verwundern...

**:::**

### Ohne Anzeige ###


_Mon, 23. February 2015 -- 07:09_

Einer der Schwaechen des ICE ist eindeutig, dass ein Teil der internen Funktionalitaet
sehr stark vom Funktionieren der Bordelektronik abhaengt. So kommt es immer wieder
vor, dass die Anzeigen fuer die Sitzplatz-Reservierungen komplett fehlen (wo auch
immer die genaue Ursache hierfuer zu suchen waere). Was dies aber bedeutet ist, dass
man sich so ziemlich an jedem Platz niederlassen kann und doch die gleiche Chance
hat von irgendeinen Bahnhof an von dort wieder aufgescheucht zu werden. Na gut, mache
ich mir jetzt einfach mal nicht zu sehr den Kopf drum, denn a) habe ich da nicht
sonderlich viel Einfluss drauf und b) muss ich mich ja schliesslich irgendwo hinsetzen.

**:::**

### Supporting TROPOMI OCAL (4) ###


_Sat, 21. February 2015 -- 22:32_

It is busy times: not only have we been spending the past three weeks on supervising
the laser measurements (at least those of the team on site), but also back at the
institute trying to process and inspect the incoming data to assess the suitability
of the calibration measurements. With all of this going on there of course is a
considerable risk to -- amongst all the day to day madness -- lose out of sight
the longer-term planning (e.g. when it comes to important project milestone). One
of the attempts to keep an eye on the planning has been to revitalize efforts to
use our [Redmine](http://www.redmine.org) issue tracker. Simply filling in tasks
of course is not enough: issues kept around in the system should be assigned correctly
and updated as work progresses.

![TROPOMI Redmine issue tracker](/blog/2015/02/2015-02-21_Redmine_TROPOMI.png)

To get things going on the part of the on-ground calibration, I set aside half an hour
this afternoon, to start entering and organising tasks related to the next upcoming
milestones; not complete yet, but once going through the remainder of the calibration
validation plan (CValP) we should get a reasonable picture of what tasks need to be
worked on and how we are doing in terms of deliverables.

Back to coding now...

**:::**

### Und weg ist das Wochenende ###


_Fri, 20. February 2015 -- 17:07_

Das hatte ich mir alles ein wenig anders vorgestellt: statt einem ruhigen Wochenende
hier in Bonn habe ich nun gleich zwei Dinge mit hoher Prioriaet am Laufen.

 1. Vorbereitung fuer ein Telefon-Interview am Mittwoch mit [ESO](http://www.eso.org).
 2. Vorbereitung fuer ein fuer ein Audit bei [SRON](http://www.sron.nl).

Muss ich mal schaue, wie ich die Dinge gut unter einen Hut kriege... und gleichzeitig
noch Gelegenheit zum Schlafen finde.

**:::**

### Der richtige Soundtrack ###


_Thu, 19. February 2015 -- 18:03_

Es kommt doch immer wieder auf die richtige Musik fuer die entsprechende Gelegenheit
an: da ich schauen muss, dass ich bis Bonn noch paar Dinge erledigt bekommen muss
-- vor allen Dingen den Sidney versprochenen Code fuer die Offset Korrektur
fertigstellen -- habe ich mich fuer den zu der Situation passenden Soundtrack
entschieden. Die Kriterien hierfuer sind eigentlich recht einfach: die Musik sollte
ueber ein recht hohes Energieniveau verfuegen und trotz technischer Brillianz immer
noch ueber eine entsprechende Eingaengigkeit verfuegen. Als Start habe ich mich daher
fuer eines der Alben von _Derek Sherinian_ entschieden ("Mythology"); das passt super
von der ganzen Atmosphaere her ins hilft zweifelsfrei dabei schnell und unter Druck
zu arbeiten.

**:::**

### Zu Fuss zum Institut ###


_Thu, 19. February 2015 -- 09:39_

Aufgrund der Kombination von a) bis tief in die Nacht arbeiten und b) dem wunderschoen
sonnigen Wetter, habe ich mich gestern Morgen kurzerhand entschlossen den Weg zum
Institut zu Fuss anzutreten. War ja nicht das erste Mal, dass ich die Strecke gelaufen
bin, so dass ich eine ungefaehre Idee davon habe, wieviel Zeit ich dafuer noetig habe.

![GPS track](/blog/2015/02/2015-02-19_GPS_track.png)

Da es ferner schon eine ganze Weile her ist, dass ich hier in Utrecht mit Kamera
unterwegs war, habe ich mir (endlich mal wieder) Kamera und Stativ mitgenommen, um
ein paar Eindruecke festzuhalten. Gut, ich hatte nicht unbedingt vor eine groessere
Exkursion zu starten (da ich ja schliesslich ins Institut musste), aber immerhin
bin ich doch mit ein paar Aufnahmen zurueckgekommen.

**:::**

### Hilfe beim Testen ###


_Wed, 18. February 2015 -- 01:59_

Ich finde es doch immer wieder gut, wenn sich Mittel und Wege finden lassen, mit
welchen sich Code und Prozeduren strukturell sauber und einfach halten lassen. Dazu
gehoert (zumindest fuer meinen Geschmack) z.B. dass sich wiederholende Taetigkeiten
oder Informationsmuster nicht notwendigerweise ausgeschrieben werden muessen, sondern
sich durchaus in abstrahierter Form notieren lassen.

Zuletzt habe ich dieses Prinzip beim Aufsetzen der Tests fuer die Kalibrationspipeline
anwenden koennen: eine lange Liste an Konfigurationsdateien anzulegen und einzuchecken
lasse ich diese von einem einfachen ``Makefile`` bei Bedarf erzeugen -- mit der
dazugehoerenden Option alles Ueberfluessige anschliessend wieder wegwerfen zu koennen.
So kommt es dann auch dass ich statt

~~~~
    l01b_processing/
    |-- Makefile
    |-- occ.pro_stop_after_artcorr.ocal
    |-- occ.pro_stop_after_dccorr.ocal
    |-- occ.pro_stop_after_dn2v.ocal
    |-- occ.pro_stop_after_dpqf.ocal
    |-- occ.pro_stop_after_et.ocal
    |-- occ.pro_stop_after_mem.ocal
    |-- occ.pro_stop_after_nonlin.ocal
    |-- occ.pro_stop_after_offset.ocal
    |-- occ.pro_stop_after_v2c.ocal
    |-- occ.pro_stop_before_artcorr.ocal
    |-- occ.pro_stop_before_dccorr.ocal
    |-- occ.pro_stop_before_dn2v.ocal
    |-- occ.pro_stop_before_dpqf.ocal
    |-- occ.pro_stop_before_et.ocal
    |-- occ.pro_stop_before_mem.ocal
    |-- occ.pro_stop_before_nonlin.ocal
    |-- occ.pro_stop_before_offset.ocal
    |-- occ.pro_stop_before_v2c.ocal
    |-- swir_fm.pro_stop_after_artcorr.ocal
    |-- swir_fm.pro_stop_after_dccorr.ocal
    |-- swir_fm.pro_stop_after_dn2v.ocal
    |-- swir_fm.pro_stop_after_dpqf.ocal
    |-- swir_fm.pro_stop_after_et.ocal
    |-- swir_fm.pro_stop_after_mem.ocal
    |-- swir_fm.pro_stop_after_nonlin.ocal
    |-- swir_fm.pro_stop_after_offset.ocal
    |-- swir_fm.pro_stop_after_v2c.ocal
    |-- swir_fm.pro_stop_before_artcorr.ocal
    |-- swir_fm.pro_stop_before_dccorr.ocal
    |-- swir_fm.pro_stop_before_dn2v.ocal
    |-- swir_fm.pro_stop_before_dpqf.ocal
    |-- swir_fm.pro_stop_before_et.ocal
    |-- swir_fm.pro_stop_before_mem.ocal
    |-- swir_fm.pro_stop_before_nonlin.ocal
    |-- swir_fm.pro_stop_before_offset.ocal
    |-- swir_fm.pro_stop_before_v2c.ocal
    |-- template.occ.txt
    `-- template.swir_fm.txt
~~~~

nur einen Bruchteil an wirklich notwendigen Informationen vorhalten muss (und selbst
hier koennte ich wahrscheinlich, mit ein wenig Nachdenken, noch einmal reduzieren):

~~~~
    l01b_processing/
    |-- Makefile
    |-- template.occ.txt
    `-- template.swir_fm.txt
~~~~

Dieser Trend setzt sich intern natuerlich fort: statt hier alles auszuschreiben,
habe ich probiert die Dinge auch hier moeglichst so zu halten, dass es ein leichtes
waere eine neue Gruppe an Tests hinzuzufuegen.

~~~~ make
    VAR_STEPS=dpqf dn2v mem artcorr offset v2c nonlin dccorr et
    VAR_CAMPAIGNS=swir_fm occ

    # Test all correction/processing steps
    all:
            for varCampaign in $(VAR_CAMPAIGNS) ; do \
                    make all."$$varCampaign" ; \
            done

    # Test all correction/processing steps on SWIR FM data
    all.swir_fm:
            for varStep in $(VAR_STEPS) ; do \
                    make swir_fm."$$varStep" ; \
            done
~~~~

Ein wenig aergerlich an der ganzen Sache ich natuerlich, dass ich ueberhaupt ein
``Makefile`` schreibe -- normalerweise wuerde ich diese Aufgabe [CMake](http://www.cmake.org)
ueberlassen, weil dies naemlich auch in recht einfacher Weise erlauben wuerde
Gruppen von Build-Targets zu definieren. In begrenzter Weise ist dies natuerlich
auch in der nun verwendeten Loesung der Fall, aber fuer meinen Geschmack wuerde
hier noch ein weiterer Schritt hinzugehoeren (naemlich die vorherige Konfiguration).

**:::**

### Hektisch ###


_Mon, 16. February 2015 -- 18:19_

Na, das war doch alles ein wenig hektisch am heutigen Tage. Nicht dass ich da
grundsaetzlich ein Problem mit haette, aber wie sich im Zuge von diversen Diskussionen
herausstellte, war zumindest ein Teil der gestarteten Aktionen nicht so 100%ig sinnvoll.
Also mache ich mich erst einmal auf den Weg zurueck und schaue dann lieber heute Abend
noch einmal nach...

**:::**

### Abend in Tannenbusch ###


_Mon, 09. February 2015 -- 19:47_

Da war es doch gut, dass ich Kamera und Stativ mitgenommen habe: als wir am
gestrigen Sonntag Nachmittag noch einmal mit Sofia losgezogen sind, war das Wetter
einfach zu schoen, als dass ich mir die Moeglichkeit haette entgehen lassen zumindest
ein paar Bilder einzufangen. Hundebilder hatte ich jetzt nicht unbedingt auf der Liste
-- was dies betrifft war ich an den vorherigen Tagen ja schon fleissig gewesen --
aber ich dachte mir, dass es sicherlich nicht schaden koennte ein wenig von der
spaet-nachmittaglichen Stimmung in dem Gruenguertel am Nordrand von Tannenbusch
einzufangen. Hat netterweise dann auch geklappt...

![Sonnenuntergang](/blog/2015/02/hdr_20150208_181705_Tannenbusch.jpg)

Was mir immer noch fehlt sind ein paar wirklich gute Aufnahmen vonn dem Schilf und den
Baeumen rund um den See -- ich denke aber mal, dass ich dies auch noch hinkriegen
werde.

**:::**

### Spielen mit Sofia ###


_Fri, 06. February 2015 -- 18:45_

Die Kleine kriegt definitiv nicht genug wenn es ums Spielen geht. Als ich gestern
Abend nach Hause gekommen bin, dauerte es nur wenig Sekunden, bis der Hund die
Treppe heruntergerast kam, um sich dann direkt das Lieblingsspielzeug zu schnappen
und mich zum Mitmachen aufzufordern. Gut, habe ich mir nicht zweimal sagen lassen
-- auch wenn ich zumindest mal meine Sachen abstellen und die Jacke ausziehen wollte.

![Sofia](/blog/2015/02/dsc_20150131_144052_Sofia.jpg)

Am heutigen Nachmittag sind wir dann auf der Hundespielwiese am Rand des Tannenbuscher
Gruenguertels gewesen. Auch wenn wir etwas spaeter als optimal dort aufgetaucht sind,
waren doch einige Hunde unterwegs, so dass Sofia die Gelegenheit hatte, sich noch
einmal deutlich mehr zu verausgaben, als dies hier im Haus moeglich waere. Die
Nebenwirkung ist natuerlich, dass der Hund anschliessend aussieht wie ein Schwein
(dies waere wohl noch schlimmer, wenn nicht ein Teil der Faechen noch gefroren ist),
aber dies ist ja nichts, was sich nicht mit ein wenig Wasser beheben liesse.

**:::**

### Rueckweg ###


_Thu, 05. February 2015 -- 17:22_

Da bin ich gestern Abend doch noch gut zurueck gekommen. Wie sich anhand der Karte
erkennen laesst bin ich zwar deutlich mehr Bretzeln gefahren, als dies normalerweise
der Fall waere, aber leider gibt es nach 21:15 Uhr keine direkten Verbindungen mehr
(das waere dann Linie 71 oder 72).

![GPS track](/blog/2015/02/2015-02-05_GPS_track.png)

Da ich von der Innenstadt aus mit der Linie 77 -- und nicht, wie besser waere, mit
der Linie 1 oder 47 -- unterwegs war, musste ich schauen, wo ich am besten aussteigen
kann, um den Rest des Heimweges zu laufen. Ich wollte einfach mal ein wenig testen und
bin daher bereits auf Hoehe der Rijnlaan aus dem Bus gehuepft. Die Strecke ist bestens
bekannt, aber ich scheine mich doch immer noch zu verschaetzen, was die Laenge des
Verlengde Hoogravenseweg betrifft; das zieht sich schon noch einmal recht ordentlich,
so dass ich beim naechsten Mal (sollte dies wieder noetig werden) dann doch lieber bis
zum Europaplain fahren und dann die Goylaan entlanglaufe.

 Insgesamt passt es dann aber doch wieder recht gut, weil sich Julia kurz nach
 dem Aussteigen bei mir gemeldet hat; noch bevor das Gespraech zu Ende war, habe ich
 es bis an die Haustuere geschafft, so dass ich also letzten Endes noch nicht einmal
 alleine unterwegs war. 

**:::**

### Lange Support Session ###


_Wed, 04. February 2015 -- 23:01_

Also da ist es doch recht spaet geworden -- so spaet in der Tat, dass ich nun mal
schauen muss, mit welche Kombination von Bussen ich nun zurueckkomme. Wenn alles gut
geht komme ich mit der Linie 28 bis an den Rand der Innenstadt, von dort aus geht es
dann mit der Linie 77 weiter...

So spaet geworden ist es, weil ich insgesamt gut zwei Stunden damit zugebracht habe
Computer-Support zu geben. Durch die Kombination von Remote-Access und grossem
Bildschirm war dies zwar immer noch recht akzeptabel, aber letzten Endes geht da
doch einiges an Zeit ins Land. Was mich persoenlich immer noch ein wenig verwundert
ist, warum es da derartige Probleme mit der Audio-Konfiguration gibt: nach ein wenig
hin und her ist es mir zwar gelungen Skype zu ueberzeugen ein- und ausgehenden Ton
in vernuenftiger Weise miteinander abzustimmen, aber weder Amarok noch Banshee wollten
die auf dem Rechner liegende Musik abspielen. Mein Verdacht an der Stelle ist, dass
es in der Tat Probleme mit dem Decodieren der Datei-Formate gibt (was mich schon
ein wenig wundert): wenn von ueber 800 Titeln gerade einmal zwei anspielbar sind,
dann scheint es sich doch um ein tieferliegenderes Problem zu handeln. Ich denke
mal, dass ich da ein meiner virtuellen Maschinen anwerfen werde, um zu schauen
ob ich dieses Problem zumindest reproduzieren kann -- wenn dies nicht der Fall ist
wird es wirklich kniffelig.
