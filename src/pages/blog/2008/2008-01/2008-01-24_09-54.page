---
title: "Parallele Entwicklung"
in_menu: false
author: Lars Baehren
---

## {title:} ##

_Thu, 24. January 2008 -- 09:54_

Das ist jetzt sicherlich nicht optimal abgelaufen, war aber angesichts der unterschiedlichen Grundvorstellungen war dies vielleicht unvermeidbar. Da waere auf der einen Seite Joes sehr allgemeiner Zugang, welcher ueber ein generisches Interface die darunterliegenden Details eines Fileformates vor dem Application-Programmer verbirgt und letzten Endes fuer eine Vielzahl von Formaten und Typen funktionieren soll. Auf der anderen Seite halte ich es fuer essentiell, dass eine I/O Library ebenfalls die Information enthaelt, wie die diversen Dateiformate intern strukturiert sind, so dass es moeglich ist direkt auf einzelne Elemente zuzugreifen. Wenn man es zusammenfassen will, dann stellt Joes DAL zwar alle Tools bereits um in einer sehr allgemeinen Weise auf Elemente innerhalb eines Datasets zurueckzugreifen, hat aber selber keinerlei Informationen ueber den internen Aufbau, so dass dies von demjenigen geliefert werden muss, der ueber die DAL auf eine Datei zugreifen will. Mein Ansatz hingegen ist es, dies interne Struktur eines Datensatzes auf eine Reihe von Objekten abzubilden, so dass ich lediglich eine Methode aufrufen muss um mir eine bestimmte Information zu liefern. Ist so eine Reihe von Klassen dann Bestandteil einer Library, so muss der Programmierer einer Anwendung nicht immer wieder erneut die Information ueber die Struktur implementieren.

Mit diesem Unterschied im Hinterkopf habe ich mich zuletzt daran gemacht, uns das neu definierte Format zur Speicherung der Transient Buffer Board (TBB) Daten nutzbar zu machen. Weil mir einfach eine ganze Reihe Funktionen in Joes Code fehlten und mir die Lieferung der entsprechenden Funktionalitaet einfach nicht schnell genug ging, habe ich mich einfach selber hingesetzt und mir noch die entsprechenden Komponenten geschrieben. Als Resultat habe ich nun eine Reihe von sehr allgemeinen Funktionen, welche -- ohne den Umweg ueber die DAL -- direkt mit der [HDF5 Library](http://hdfgroup.com/products/hdf5/index.html) und den entsprechenden Datensaetzen sprechen. Der Punkt fuer mich war schlicht ergreifend: wenn es die von mir benoetigten Methoden nicht gibt -- oder diese an bestimmte Bedingungen gekoppelt sind -- und ich sie mir selber schreiben muss, dann werde ich den direktesten Weg nehmen. So abstrahiert die DAL zwar die spezifischen Aufrufe der HDF5 Library weg, andererseits ist dies nicht mehr noetig, wenn ich weiss womit ich es zu tun habe -- was hier ja der Fall ist: waehrend die DAL ja eine Vielzahl von Dateiformaten unterstuetzen soll, geht es mir sehr speziell um den Zugang zu den TBB Daten, so dass ich mit der entsprechenden Format-Definition direkt eine Abbildung der Dateistruktur auf ein C++ Objekt vornehmen kann.

Die Frage, welche sich nun allerdings stellt ist, in wie weit es moeglich sein kann, die beiden unterschiedlichen Ansaetze zusammenzubringen, da es sicherlich keine sonderlich gute Loesung ist zusaetzliche Funktionalitaet ausserhalb der Library zu verwalten, welche eigentlich den Zugriff auf die Daten bereitstellen soll. Das wird also noch einmal ein wenig Diskussion erfordern...
