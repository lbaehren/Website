---
title: "Aufraeumarbeiten"
in_menu: false
author: Lars Baehren
tags: Travel Zwolle
---

## {title:} ##

_Wed, 14. January 2009 -- 09:44_

Also wuerde wieder einmal sagen, dass die Reise hier bis **Zwolle** schon recht produktiv war (ich wuerde sogar fast glatt behaupten produktiver als der gestrige Nachmittag an der Uni). Ich bin derzeit noch gut damit beschaeftigt in dem Code aufzuraeumen, welcher den lange erwarteten Imager fuer die CR-Tools bereitstellt; nachdem ich ja im Dezember die Arbeiten wieder aufgenommen habe, bin ich derzeit immer noch dabei einige konzeptionelle Fehler zu beseitigen.

>> Was mir aber noch ein wenig Kofpzerbrechen bereitet ist, wie ich die noch bestehenden Abhaengigkeiten von den aelteren Teilen ersetzt bekomme; wenn es sich alleine um die Module handeln wuerde, fuer welche ich verantwortlich bin, dann waere dies ja noch einigermassen zu ertragem, aber ich habe den Verdacht, dass es darueber hinaus noch weitere Abhaengigkeiten zum Code anderer Leute gibt, was bedeutet dass ich nicht so ohne weiteres Dinge umstellen kann. Da werde ich echt noch einmal ein wenig knobeln muessen, wie ich dies geloest bekomme.
>
> Und, schon eine Idee?

Ideen habe ich sicherlich, nur geht es leider mit der Umsetzung nicht immer ganz so schnell, wie ich dies gerne haette. Einer der wesentlichen Punkte an der ganzen Geschichte ist, dass ich ja zwischenzeitlich recht lange nichts am dem [Imaging Module](http://usg.lofar.org/doxygen/group__CR__Imaging.html) gemacht habe, folglich mich wieder gedanklich darauf einstellen musste. Waehrend dies auf der einen Seite natuerlich leider einiges an kostbarer Zeit kostet, ermoeglicht dies auf der anderen Seite aber auch noch einmal einen frischeren Blick auf was auch immer bisher gemacht worden ist. Was dies betrifft habe ich mittlerweile doch einen etwas bessereren Ueberblick darueber, wie die einzelnen Elemente zusammenspielen muessen (auch wenn ich leider immer noch nicht behaupten koennte, dass mir alles klar ist). So habe ich aber waehrend der Einarbeitung einige Konzepte gefunden, welche entweder unvollstaendig oder leicht fehlerhaft waren; statt also direkt in das Schreiben von seitenweise neuem Code zu gehen, muss ich also erst einmal ein wenig in dem bestehenden Code aufraeumen, damit ich es nicht mit mehr Chaos als unbedingt noetig zu tun habe.

Eine der Konsequenzen ist z.B. dass ich massiv an dem Koordinaten Module gedreht habe, um die besonderen Anforderungen bei der Erzeugung einer Karte (oder eines Volumens) beruecksichtigen zu koennen. So habe ich nun insgesamt drei Klassen -- ''TimeFreqCoordinate'', ''SpatialCoordinate'', ''SkymapCoordinate'' -- geschrieben, welche stufenweise die fuer ein Bild benoetigten Koordinaten kapseln:

* `TimeFreqCoordinate` -- ist eine Erweiterung der `TimeFreq` Klasse, welche als Container fuer die Zeit- und Frequenzachse funktioniert. Aufgrund der Art der Berechnung sind beide Achsen nicht einfach unabhaengig voneinander, sondern durch die FFT miteinander verbunden; will heissen dass die Aenderungen einer Groesse wie der Anzahl an Samples, welche in die FFT gesteckt werden, nicht nur die die zeitliche, sondern auch die spektrale Aufloesung veraendern. Letzten Endes gibt es eine kleine Anzahl von Basisparametern, von welchen alle weiteren Groessen abgeleitet werden koennen, aber dies ist eben ein wenig trickreich; da dies aber wieder und wieder benoetigt wird, macht es vollkommen Sinn, dies in einer Klasse zusammenzufassen und damit fuer alle dies benoetigenden Module zur Verfuegung zu stellen.

* `SpatialCoordinate` traegt dem Umstand Rechnung, dass wir eben nicht nur standardmaessige zweidimensionale Bilder berechnen, sondern letzten Endes den Inhalt eines Volumens abbilden wollen. Ein solches Volumen kann aber in mehrfacher Weise parametrisiert werden: im einfachsten Fall wuerde man einer Richtungskoordinate einfach eine weitere lineare Achse hinzufuegen, welche fuer den radialen Abstand zustaendig ist. Diese Kombination waere eine direkte Erweiterungen dessen, was Astronomen typischerweise gewohnt sind, naemlich eine Projektion der Himmelssphaere auf eine darunterliegende Ebene. Da wir aber in jedem Fall noch ein wenig mehr als dies machen wollen, gibt es gleich eine ganze Reihe weiterer Koordinaten-Konstellationen: statt z.B. eine Projektion der Sphaere vorzunehmen, kann man direkt in sphaerischen Kugelkoordinaten arbeiten, was also einer Kombination von zwei Winkelkomponenten und einer radialen Achse entspricht. Darueber hinaus gibt es dann noch alle weiteren Varianten so als kartesische Koordinaten, Zylinderkoordination, etc. Um aber alles dies in konsistenter Weise unter einen Hut zu bringen muss man leider mit Kombinationen der durch [casacore](http://code.google.com/p/casacore) zur Verfuegung gestellten Klassen arbeiten; um aber gerade diesen Umstand nach aussen hin abzuschirmen habe ich mich also kurz vor Weihnachten dazu entschlossen eine eigene Klasse fuer den benoetigten Zweck anzulegen, eben die ''SpatialCoordinate''.

* Die `SkymapCoordinate` schliesslich ist der letzte Spieler in dieser Runde: da die berechnete Karte ueber (mindestens) fuenf Koordinatenachsen verfuegt -- welche darueber hinaus auch noch in die zuvor genannten Gruppen zusammenfallen -- moechte man die internen Konvertierungen und Anpassungen weitestgehend von einem Benutzer abschirmen. Aus diesem Grund ist die `SkymapCoordinate` letzten Endes ein Container fuer die beiden zuvor genannenten Objekte. Das sich daraus ergebende Kollaborations-Diagramm ist hier im Anschluss zu sehen:

![Skymap Coordinate](/blog/2009/01/skymapcoordinate_collaboration_diagram.png)

Was hat dies nun also alles zu bedeuten? Im Wesentlichen heisst dies, dass es ein wenig konzeptioneller Arbeit erfordert, um gemeinsame Strukturen und Anforderungen zu erkennen und dann in entsprechender Weise in C++ Code umzusetzen. Da sich aber der Erkenntnisstand in der mittlerweile verstrichenen Zeit geaendert hat (ich will doch schwer hoffen zum Besseren), faellt mir eben auf, wenn fruehere Loesungen bestimmten Anforderungen einfach nicht mehr gerecht werden. Teilweise gibt es dann noch die Moeglichkeit Aenderungen vorzunehmen, aber es gibt durchaus auch Faelle, wo es schneller und effizienter ist, einen vorherigen Ansatz zu verwerfen und von Grund auf zu starten.
